def setupPython(Map config = [:]) {
    script {
        def pythonVersion = config.pythonVersion ?: '3.13.3'
        def venvDir = config.venvDir ?: "${env.WORKSPACE}/venv"

        def usePyenv = sh(script: 'command -v pyenv >/dev/null 2>&1', returnStatus: true) == 0

        if (usePyenv) {
            echo "Usando pyenv para configurar Python ${pythonVersion}..."
            sh """
                export PYENV_ROOT="\$HOME/.pyenv"
                export PATH="\$PYENV_ROOT/bin:\$PATH"
                eval "\$(pyenv init --path)"


                pyenv install -s ${pythonVersion}
                pyenv global ${pythonVersion}
                python -m venv ${venvDir}
            """
        } else {
            echo "pyenv no encontrado, usando Python del sistema..."
            sh "python3 -m venv ${venvDir}"
        }

        sh """
            ${venvDir}/bin/pip install --upgrade pip setuptools wheel
            ${venvDir}/bin/pip install -e .[testing]
        """
    }
}

def lintPython(Map config = [:]) {
    script {
        def venvDir = config.venvDir ?: "${env.WORKSPACE}/venv"
        def python = "${venvDir}/bin/python"
        def pip = "${venvDir}/bin/pip"

        sh "${pip} install flake8 black isort mypy"
        sh "${python} -m flake8 src/ tests/"
        sh "${python} -m black src/ tests/"
        sh "${python} -m isort src/ tests/"
        sh "${python} -m mypy src/ tests/"
    }
}

def testPython(Map config = [:]) {
    script {
        def venvDir = config.venvDir ?: "${env.WORKSPACE}/venv"
        def python = "${venvDir}/bin/python"
        def pip = "${venvDir}/bin/pip"

        sh "${pip} install pytest pytest-cov"
        sh "${python} -m pytest --cov=src/agente_prueba2 --cov-report=xml --cov-report=html tests/"
    }
}

def buildPython(Map config = [:]) {
    script {
        def venvDir = config.venvDir ?: "${env.WORKSPACE}/venv"
        def python = "${venvDir}/bin/python"
        def pip = "${venvDir}/bin/pip"

        sh "${pip} install build"
        sh "${python} -m build"
        archiveArtifacts artifacts: 'dist/*', fingerprint: true
    }
}

def publishCoverage() {
    publishHTML([
        allowMissing: false,
        alwaysLinkToLastBuild: true,
        keepAll: true,
        reportDir: 'htmlcov',
        reportFiles: 'index.html',
        reportName: 'Coverage Report'
    ])
}

def sendEmail(Map config = [:]) {
    script {
        withCredentials([string(credentialsId: config.credentialId ?: 'email_recipient', variable: 'EMAIL_TO')]) {
            emailext(
                to: "${EMAIL_TO}",
                subject: config.subject ?: "Notificaci√≥n pipeline ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                mimeType: 'text/html',
                body: '${JELLY_SCRIPT,template="NotificacionDeBuild1"}'
            )
        }
    }
}

def cleanWorkspace() {
    cleanWs(
        cleanWhenAborted: true,
        cleanWhenFailure: true,
        cleanWhenNotBuilt: true,
        cleanWhenUnstable: true,
        deleteDirs: false
    )
}
